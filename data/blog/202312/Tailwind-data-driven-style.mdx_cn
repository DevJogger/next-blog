---
title: 为什么 Tailwind CSS 不擅长数据驱动的动态样式以及如何解决？
date: '2024-01-05'
tags: ['CSS', 'React', 'Tailwind CSS']
---

当我尝试过了 Tailwind CSS 之后，我很快就喜欢上了它：不再需要想css类名，不再需要在css文件和html/jsx/tsx文件之间来回切换，这让我在写style的时候感到非常轻松。

所以当我看到一个好看的页面效果时，我总是会想如何在Tailwind CSS中实现它。最近我就看到了这个：

<CircleProgressIndicatorsThought step={4} />

它的实质就是通过一个带角度的渐变背景，实现百分比的显示：

<CircleProgressIndicatorsThought step={1} />

然后通过添加圆角让它变成圆形：

<CircleProgressIndicatorsThought step={2} />

再加上一个伪元素，实现一个圆环形的背景。

<CircleProgressIndicatorsThought step={3} />

最后添加中间的百分比文字，就完成了我们一开始看到的效果，在使用原生css的时候，这个效果的实现是非常简单的：

```html
<div class="box">
  <div class="circle">
    <h2>85<small>%</small></h2>
  </div>
  <h3>Loading</h3>
</div>
```

```css
.box {
  padding: 40px 0;
  width: 240px;
  background: #57534e;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  gap: 20px;
  color: #ffffff;
  border-radius: 12px;
}

.box .circle {
  position: relative;
  width: 150px;
  height: 150px;
  background: conic-gradient(from 0deg, #fbbf24 0%, #fbbf24 0% 85%, #333333 85%, #333333 100%);
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.box .circle::before {
  content: '';
  position: absolute;
  inset: 10px;
  background: #57534e;
  border-radius: 50%;
}

.box h2 {
  position: relative;
  font-size: 2em;
  font-weight: 600;
}
```

在此之上，我们还可以通过两个css变量，对颜色和进度进行动态控制：

```html
<div class="box" style="--progress:60%;--color:#04e762">
  <div class="circle">
    <h2>60<small>%</small></h2>
  </div>
  <h3>Loading</h3>
</div>
```

```css
/* ... */
.box .circle {
  /* ... */
  background: conic-gradient(
    from 0deg,
    var(--color) 0%,
    var(--color) 0% var(--progress),
    #333333 var(--progress),
    #333333 100%
  );
  /* ... */
}
/* ... */
```

如果你注意看，可以发现圆环中的文字内容`60%`不能跟随css变量的变化而变化。

于是我就想到，能否使用React + Tailwind CSS来实现这个效果，通过一个变量，同时控制文字和样式中的百分比。首先，我们还是从固定样式开始入手，可以用以下的代码来实现：

```tsx
export default function CircleProgressIndicatorBasicTailwind() {
  return (
    <div className="flex flex-auto flex-col items-center gap-3 rounded-xl bg-stone-200 p-7 dark:bg-stone-600">
      <div className="relative grid h-40 w-40 place-items-center rounded-full bg-[conic-gradient(var(--tw-gradient-stops))] from-green-400 from-0% via-green-400 via-10% to-gray-700 to-10% before:absolute before:inset-3 before:rounded-full before:bg-stone-200 before:content-[''] before:dark:bg-stone-600">
        <h1 className="absolute m-0">
          10<small>%</small>
        </h1>
      </div>
      <h2 className="m-0">Loading Progress</h2>
    </div>
  )
}
```

<CircleProgressIndicatorsBasicTailwind />

但是当尝试由数据驱动样式时，我很快发现Tailwind CSS并不擅长这种情况，因为它的设计理念是通过非常多的预设类名来实现样式的复用，比如在上述代码中，`to-10%`是一个预设类名，它的作用是改变Tailwind CSS变量`--tw-gradient-to-position: 10%;`，而`to-15%`对应的则是`--tw-gradient-to-position: 15%;`，以此类推。

但当我们按照这个形式去写一个预设类名中不存在的类名时，则样式不会生效，比如在上面的例子中我们想添加`to-13%`，由于Tailwind CSS中并没有`to-13%`的类名（它以5%为间距递增），因此就需要一些特殊手段去实现，比如使用[arbitrary values](https://tailwindcss.com/docs/gradient-color-stops#arbitrary-values)。

```tsx
export default function CircleProgressIndicatorArbitrary() {
  return (
    <div className="hidden flex-auto flex-col items-center gap-3 rounded-xl bg-stone-200 p-7 dark:bg-stone-600 sm:flex">
      <div className="relative grid h-40 w-40 place-items-center rounded-full bg-[conic-gradient(var(--tw-gradient-stops))] from-[#04e762] from-0% via-[#04e762] via-[13%] to-gray-700 to-[13%] before:absolute before:inset-3 before:rounded-full before:bg-stone-200 before:content-[''] before:dark:bg-stone-600">
        <h1 className="absolute m-0">
          13<small>%</small>
        </h1>
      </div>
      <h2 className="m-0">Rendering Tracker</h2>
    </div>
  )
}
```

<CircleProgressIndicatorsArbitrary />

然后当我更进一步，如果想让这个进度条的进度可以由外部传入时，我发现Tailwind CSS就无能为力了。

### _注意：以下这种写法不生效：_

```tsx
interface Props {
  progress: number
  color: string
  title: string
}
export default function CircleProgressIndicatorDynamicClassNames() {
  return (
    <div className="hidden flex-auto flex-col items-center gap-3 rounded-xl bg-stone-200 p-7 dark:bg-stone-600 sm:flex">
      <div
        className={`relative grid h-40 w-40 place-items-center rounded-full bg-[conic-gradient(var(--tw-gradient-stops))] from-[${color}] from-0% via-[${color}] via-[${progress}%] to-gray-700 to-[${progress}%] before:absolute before:inset-3 before:rounded-full before:bg-stone-200 before:content-[''] before:dark:bg-stone-600`}
      >
        <h1 className="absolute m-0">
          {progress}
          <small>%</small>
        </h1>
      </div>
      <h2 className="m-0">{title}</h2>
    </div>
  )
}
```

根据官方文档关于[dynamic class names的指引](https://tailwindcss.com/docs/content-configuration#dynamic-class-names)，不要动态构建类名，使用的任何类名都应该是完整存在的。

> The most important implication of how Tailwind extracts class names is that it will only find classes that exist as complete unbroken strings in your source files.

> If you use string interpolation or concatenate partial class names together, Tailwind will not find them and therefore will not generate the corresponding CSS.

> Instead, make sure any class names you’re using exist in full.

> If you’re using a component library like React or Vue, this means you shouldn’t use props to dynamically construct classes.

关于更详细的说明和例子，可以点击以上的链接进去阅读。

为了解决这个问题，我的解决方案是：使用Tailwind CSS写基本样式，在Tailwind CSS无法实现想要的效果时用行内样式来实现，这样既可以得到Tailwind带来的便利，同时又可以实现动态样式等复杂的效果了。

```tsx
// CircleProgressIndicator.tsx
interface Props {
  progress: number
  color: string
  title: string
}

function CircleProgressIndicator({ progress, color, title }: Props) {
  return (
    <div
      className="flex flex-auto flex-col items-center gap-3 rounded-xl bg-stone-200 p-7 dark:bg-stone-600"}
    >
      <div
        className="relative grid h-40 w-40 place-items-center rounded-full transition-all before:absolute before:inset-3 before:rounded-full before:bg-stone-200 before:content-[''] before:dark:bg-stone-600"
        style={
          {
            '--circleProgressColor': `${color}`,
            '--circleProgress': `${progress * 100}%`,
            background:
              'conic-gradient(from 0deg, var(--circleProgressColor) 0%, var(--circleProgressColor) 0% var(--circleProgress), #333333 var(--circleProgress), #333333 100%)',
          } as React.CSSProperties
        }
      >
        <h1 className="absolute m-0">{(progress * 100).toFixed()}%</h1>
      </div>
      <h2 className="m-0">{title}</h2>
    </div>
  )
}
```

<CircleProgressIndicators />

---

## 总结

Tailwind CSS 为我们提供了一种全新的样式编写方式，它的设计理念是通过非常多的预设类名来实现样式的复用，这种方式在大多数情况下都能满足我们的需求，但是当我们需要实现一些动态样式时，比如通过外部变量来控制样式中的百分比，Tailwind CSS就无能为力了。在Tailwind CSS的基础上，我们可以用行内样式的方式来实现这个效果。
